#pragma once

#include <functional>
#include <future>
#include <istream>
#include <memory>
#include <string>
#include <type_traits>

#include "synchronization/msg_queue.h"

#include "tri-ad-challenge/user_input"

namespace triad {

namespace synchronization {
template<typename T>
class MsgQueue;
}

class WordInputReader {
  using WordQueue = synchronization::MsgQueue<std::string>;
  using WordQueuePtr = std::shared_ptr<WordQueue>;
  
  WordQueuePtr word_queue_;
  std::string stop_;
  // The message to be displayed to ask the user for data.
  std::string msg_;

 public:
  WordInputReader(WordQueuePtr queue, const std::string &stop,
      const std::string& msg = "Enter a text: ")
      : word_queue_(queue), stop_(stop), msg_(msg) {}

  // non default constructible                
  WordInputReader() = delete;
  // non-copyable
  WordInputReader(const WordInputReader&) = delete;
  WordInputReader& operator=(const WordInputReader&) = delete;
  // non-move-assignable
  WordInputReader& operator=(WordInputReader&&) = delete;
  
  // movable (to be possible to move it to std::thread)
  WordInputReader(WordInputReader&& rhs) 
      : 
      word_queue_(std::move(rhs.word_queue_)), 
      stop_(std::move(rhs.stop_)), msg_(std::move(rhs.msg_)) {}
  
  void AskWords(const UserInputFn& user_in_fn = AskUserInput) {
    CheckValidity(); // will throw if word_queue_ or stop_ are invalid
    
    bool shall_stop = false;

    while (!shall_stop) {
      std::string line = user_in_fn(msg_);

      std::stringstream ss(line);  // split line by " "
      std::string word;

      while (!ss.eof() && !shall_stop) {
        ss >> word; // reading new work
        
        shall_stop = word == stop_; // WARNING! compare it before moving 'word'
        word_queue_->Send(std::move(word));  // thread safe
      }
    }
  }

 private:
  void CheckValidity() const { 
    if (!word_queue_ || stop_.empty()) { // defensive programming
      throw std::runtime_error("Attributes word_queue_ or stop_ are invalid.");
    }
  }
};

}  // namespace triad
